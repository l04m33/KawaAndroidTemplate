buildscript {
    project.ext {
        if (!project.hasProperty('appId')) {
            project.ext.appId = 'com.theerrorlog.superbapp'
        }
        if (!project.hasProperty('appVersionCode')) {
            project.ext.appVersionCode = 1
        }
        if (!project.hasProperty('appVersionName')) {
            project.ext.appVersionName = '1.0'
        }

        if (!project.hasProperty('keyStoreFile')) {
            project.ext.keyStoreFile = 'release-key.jks'
        }
        if (!project.hasProperty('keyStorePassword')) {
            project.ext.keyStorePassword = '123456'
        }
        if (!project.hasProperty('releaseKeyAlias')) {
            project.ext.releaseKeyAlias = 'relkey'
        }
        if (!project.hasProperty('releaseKeyPassword')) {
            project.ext.releaseKeyPassword = '123456'
        }

        if (!project.hasProperty('localLibsDir')) {
            project.ext.localLibsDir = 'libs'
        }

        if (!project.hasProperty('androidCompileSdkVersion')) {
            project.ext.androidCompileSdkVersion = 28
        }
        if (!project.hasProperty('androidTargetSdkVersion')) {
            project.ext.androidTargetSdkVersion = 28
        }
        if (!project.hasProperty('androidMinSdkVersion')) {
            project.ext.androidMinSdkVersion = 23
        }
        if (!project.hasProperty('androidBuildToolsVersion')) {
            project.ext.androidBuildToolsVersion = '28.0.3'
        }
        if (!project.hasProperty('androidGradlePluginVersion')) {
            project.ext.androidGradlePluginVersion = '3.3.2'
        }

        if (!project.hasProperty('kawaSourceDir')) {
            project.ext.kawaSourceDir = 'src/main/kawa'
        }
    }

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${androidGradlePluginVersion}"
    }
}

apply plugin: 'com.android.application'

allprojects {
    repositories {
        google()
        jcenter()
    }
}

dependencies {
    implementation fileTree(dir: localLibsDir, include: ['*.jar'])
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        applicationId appId
        targetSdkVersion androidTargetSdkVersion
        minSdkVersion androidMinSdkVersion
        versionCode appVersionCode
        versionName appVersionName
    }

    signingConfigs {
        release {
            storeFile file(keyStoreFile)
            storePassword keyStorePassword
            keyAlias releaseKeyAlias
            keyPassword releaseKeyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug { }
    }
}

afterEvaluate {
    def androidPlugin = plugins.findPlugin('com.android.application')
    def androidBootClassFiles = files(androidPlugin.androidBuilder.getBootClasspath(false))
    def kawaSourceFiles = fileTree(dir: kawaSourceDir, include: ['**/*.scm'])

    android.applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def javaCompileTask = tasks.findByName(variant.javaCompileProvider.name)
        def destDir = javaCompileTask.destinationDir
        def javaClasspath = javaCompileTask.classpath

        task "compileKawa${variantName}" (type: JavaExec) {
            classpath fileTree(dir: localLibsDir, include: ['*.jar'])
            classpath androidBootClassFiles
            classpath javaClasspath
            classpath destDir

            inputs.files(classpath)
            inputs.files(kawaSourceFiles)
            outputs.dir(destDir)

            main 'kawa.repl'

            args '--scheme'

            args '--warn-invoke-unknown-method'
            args '--warn-undefined-variable'
            args '--warn-uninitialized'
            args '--warn-unknown-member'
            args '--warn-unreachable'
            args '--warn-unused'
            args '--warn-void-used'
            args '--warn-as-error'

            args '-d'
            args destDir
            args '-C'
            args kawaSourceFiles.getFiles()
        }

        tasks.findByName("compileKawa${variantName}").dependsOn(javaCompileTask)
        tasks.findByName("compile${variantName}Sources").dependsOn("compileKawa${variantName}")
    }
}

// gradle.taskGraph.whenReady {taskGraph ->
//     println "Found task graph: " + taskGraph
//     println "Found " + taskGraph.allTasks.size() + " tasks."
//     taskGraph.allTasks.forEach { task ->
//         println task
//         task.dependsOn.forEach { dep ->
//             println "  - " + dep
//         }
//     }
// }
